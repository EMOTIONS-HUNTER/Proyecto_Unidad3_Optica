"""
Simulador Interactivo de Polarizaci√≥n y Ley de Malus
Autor: [Cristian Ashiel Contreras Sandoval ]
Fecha: [30/10/2025]

Este simulador permite visualizar la Ley de Malus y experimentar con 
diferentes configuraciones de polarizadores.
"""

import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from malus_calculations import PolarizationSimulator, calculate_transmission_angle

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Simulador de Polarizaci√≥n - Ley de Malus",
    page_icon="üîÖ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def setup_sidebar():
    """Configura los controles en la barra lateral"""
    st.sidebar.title("üîÖ Controles del Simulador")
    
    st.sidebar.markdown("### Par√°metros de Simulaci√≥n")
    
    # Intensidad inicial
    I0 = st.sidebar.slider(
        "Intensidad inicial I‚ÇÄ (W/m¬≤)",
        min_value=0.1,
        max_value=10.0,
        value=1.0,
        step=0.1,
        help="Intensidad de la luz incidente no polarizada"
    )
    
    # N√∫mero de polarizadores
    num_polarizers = st.sidebar.selectbox(
        "N√∫mero de polarizadores",
        options=[2, 3, 4],
        index=0,
        help="Selecciona cu√°ntos polarizadores incluir en la simulaci√≥n"
    )
    
    # √Ångulos de los polarizadores
    angles = []
    st.sidebar.markdown("### Configuraci√≥n de √Ångulos")
    
    for i in range(1, num_polarizers):
        angle = st.sidebar.slider(
            f"√Ångulo del polarizador {i+1} (¬∞)",
            min_value=0,
            max_value=180,
            value=45 if i == 1 else 90,
            step=5,
            help=f"√Ångulo entre el polarizador {i} y {i+1}"
        )
        angles.append(angle)
    
    return I0, num_polarizers, angles

def plot_malus_curve(I0, current_angle=None):
    """Genera la gr√°fica de la Ley de Malus"""
    simulator = PolarizationSimulator(I0)
    angles, intensities = simulator.theoretical_curve()
    
    fig = go.Figure()
    
    # Curva te√≥rica
    fig.add_trace(go.Scatter(
        x=angles, 
        y=intensities,
        mode='lines',
        name='Ley de Malus',
        line=dict(color='blue', width=3),
        hovertemplate='√Ångulo: %{x}¬∞<br>Intensidad: %{y:.3f} W/m¬≤<extra></extra>'
    ))
    
    # Punto actual si se proporciona
    if current_angle is not None:
        current_intensity = simulator.malus_law(current_angle)
        fig.add_trace(go.Scatter(
            x=[current_angle],
            y=[current_intensity],
            mode='markers+text',
            name='Configuraci√≥n actual',
            marker=dict(size=12, color='red'),
            text=[f'{current_intensity:.3f} W/m¬≤'],
            textposition='top center'
        ))
    
    fig.update_layout(
        title='Ley de Malus - Intensidad Transmitida vs √Ångulo',
        xaxis_title='√Ångulo entre polarizadores (¬∞)',
        yaxis_title='Intensidad transmitida (W/m¬≤)',
        hovermode='x unified',
        height=400
    )
    
    return fig

def visualize_polarizer_system(angles, intensities):
    """Visualiza el sistema de polarizadores"""
    num_polarizers = len(intensities)
    
    fig = go.Figure()
    
    # Polarizadores como barras
    for i in range(num_polarizers):
        fig.add_trace(go.Bar(
            x=[f'P{i+1}'],
            y=[intensities[i]],
            name=f'Despu√©s de P{i+1}',
            text=[f'{intensities[i]:.3f} W/m¬≤'],
            textposition='auto',
        ))
    
    fig.update_layout(
        title='Intensidad en Cada Etapa del Sistema',
        xaxis_title='Polarizador',
        yaxis_title='Intensidad (W/m¬≤)',
        showlegend=False,
        height=400
    )
    
    return fig

def show_educational_content():
    """Muestra contenido educativo"""
    st.markdown("""
    ## üìö Marco Te√≥rico - Polarizaci√≥n y Ley de Malus
    
    ### ¬øQu√© es la polarizaci√≥n?
    La polarizaci√≥n es un fen√≥meno donde las ondas de luz oscilan predominantemente 
    en una direcci√≥n espec√≠fica. Los polarizadores son dispositivos que solo permiten 
    el paso de luz que vibra en una direcci√≥n particular.
    
    ### Ley de Malus
    La **Ley de Malus**, descubierta por √âtienne-Louis Malus en 1809, establece que 
    cuando la luz polarizada pasa a trav√©s de un segundo polarizador (analizador), 
    la intensidad transmitida viene dada por:
    
    """)
    
    st.latex(r"I = I_0 \cdot \cos^2(\theta)")
    
    st.markdown("""
    Donde:
    - \( I \) = Intensidad transmitida
    - \( I_0 \) = Intensidad incidente
    - \( \theta \) = √Ångulo entre los ejes de transmisi√≥n de los polarizadores
    
    ### Aplicaciones en Ingenier√≠a
    - **Pantallas LCD**: Uso de polarizadores para controlar p√≠xeles
    - **Gafas de sol polarizadas**: Reducen reflejos
    - **Fotograf√≠a**: Mejora de contrastes y eliminaci√≥n de reflejos
    - **Comunicaciones √≥pticas**: Modulaci√≥n de se√±ales
    - **Sensores**: Medici√≥n de tensiones en materiales
    """)

def calculate_efficiency(angles, intensities):
    """Calcula m√©tricas de eficiencia del sistema"""
    initial_I = intensities[0]
    final_I = intensities[-1]
    
    efficiency = (final_I / initial_I) * 100
    total_angle = sum(angles)
    
    return {
        'eficiencia_transmision': efficiency,
        'intensidad_inicial': initial_I,
        'intensidad_final': final_I,
        'perdida_total': initial_I - final_I,
        'angulo_total': total_angle
    }

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Header
    st.title("üîÖ Simulador Interactivo de Polarizaci√≥n y Ley de Malus")
    st.markdown("---")
    
    # Sidebar con controles
    I0, num_polarizers, angles = setup_sidebar()
    
    # Inicializar simulador
    simulator = PolarizationSimulator(I0)
    
    # Calcular intensidades
    if num_polarizers == 2:
        current_intensity = simulator.malus_law(angles[0])
        intensities = [I0, current_intensity]
    else:
        intensities = simulator.multiple_polarizers(angles)
    
    # Layout principal
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Gr√°fica de Ley de Malus
        current_angle = angles[0] if angles else 0
        malus_fig = plot_malus_curve(I0, current_angle)
        st.plotly_chart(malus_fig, use_container_width=True)
        
        # Sistema de polarizadores
        system_fig = visualize_polarizer_system(angles, intensities)
        st.plotly_chart(system_fig, use_container_width=True)
    
    with col2:
        st.markdown("### üìä Resultados Actuales")
        
        # Mostrar resultados num√©ricos
        results_df = pd.DataFrame({
            'Etapa': [f'P{i+1}' for i in range(len(intensities))],
            'Intensidad (W/m¬≤)': [f'{I:.4f}' for I in intensities],
            'Porcentaje': [f'{(I/I0)*100:.1f}%' for I in intensities]
        })
        
        st.dataframe(results_df, use_container_width=True)
        
        # M√©tricas de eficiencia
        if len(angles) > 0:
            metrics = calculate_efficiency(angles, intensities)
            
            st.metric(
                label="Eficiencia de Transmisi√≥n",
                value=f"{metrics['eficiencia_transmision']:.1f}%"
            )
            
            st.metric(
                label="P√©rdida Total",
                value=f"{metrics['perdida_total']:.4f} W/m¬≤"
            )
        
        # Calculadora de √°ngulo
        st.markdown("### üßÆ Calculadora de √Ångulo")
        target_intensity = st.number_input(
            "Intensidad deseada (W/m¬≤)",
            min_value=0.0,
            max_value=float(I0),
            value=float(I0/2),
            step=0.1
        )
        
        if target_intensity > 0:
            try:
                required_angle = calculate_transmission_angle(target_intensity, I0)
                st.info(f"**√Ångulo requerido:** {required_angle:.1f}¬∞")
            except ValueError as e:
                st.error(str(e))
    
    # Contenido educativo
    st.markdown("---")
    show_educational_content()
    
    # Validaci√≥n te√≥rica
    st.markdown("---")
    st.markdown("### üîç Validaci√≥n Te√≥rica")
    
    col_val1, col_val2 = st.columns(2)
    
    with col_val1:
        st.markdown("**Datos de Referencia (√Ångulos comunes)**")
        reference_data = {
            0: I0,
            30: I0 * (np.cos(np.radians(30)) ** 2),
            45: I0 * (np.cos(np.radians(45)) ** 2),
            60: I0 * (np.cos(np.radians(60)) ** 2),
            90: 0.0
        }
        
        reference_df = pd.DataFrame.from_dict(
            reference_data, 
            orient='index',
            columns=['Intensidad Te√≥rica (W/m¬≤)']
        )
        reference_df.index.name = '√Ångulo (¬∞)'
        st.dataframe(reference_df)
    
    with col_val2:
        st.markdown("**Comparaci√≥n con Configuraci√≥n Actual**")
        if angles:
            current_result = simulator.malus_law(angles[0])
            theoretical = I0 * (np.cos(np.radians(angles[0])) ** 2)
            error = abs(current_result - theoretical)
            
            st.metric("Resultado Simulado", f"{current_result:.4f} W/m¬≤")
            st.metric("Valor Te√≥rico Esperado", f"{theoretical:.4f} W/m¬≤")
            st.metric("Error Absoluto", f"{error:.6f} W/m¬≤")

    # Informaci√≥n t√©cnica
    with st.expander("üìã Informaci√≥n T√©cnica del Simulador"):
        st.markdown("""
        **Especificaciones t√©cnicas:**
        - Precisi√≥n num√©rica: 64-bit floating point
        - Rango de √°ngulos: 0¬∞ - 180¬∞
        - Resoluci√≥n angular: 0.1¬∞
        - Validaci√≥n: Comparaci√≥n con soluci√≥n anal√≠tica
        - Algoritmo: Implementaci√≥n directa de Ley de Malus
        
        **L√≠mites f√≠sicos:**
        - Intensidad no puede ser negativa
        - Intensidad transmitida ‚â§ Intensidad incidente
        - Conservaci√≥n de energ√≠a verificada
        """)

if __name__ == "__main__":
    main()
